services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 18000
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 18000
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  kafka-init:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: /bin/bash
    command: >
      -c "
      echo 'Esperando a que Kafka esté completamente listo...' &&
      sleep 20 &&
      echo 'Creando tópicos de Kafka...' &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic topic_preguntas_nuevas --partitions 1 --replication-factor 1 &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic topic_preguntas_reintento --partitions 1 --replication-factor 1 &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic topic_respuestas_llm_exitosas --partitions 1 --replication-factor 1 &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic topic_resultados_validados --partitions 1 --replication-factor 1 &&
      echo '✓ Tópicos creados exitosamente.' &&
      kafka-topics --list --bootstrap-server kafka:9092
      "

  mysql:
    image: mysql:8.0
    container_name: mysql
    networks:
      default:
        aliases:
          - mysql_base 
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: mi_base
      MYSQL_USER: usuario
      MYSQL_PASSWORD: pass123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

      

 
  ollama:
    image: ollama/ollama
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped

 
  flink-jobmanager:
    image: flink:1.18.1-scala_2.12-java11
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    command: bash -c "/docker-entrypoint.sh jobmanager"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager

 
  flink-taskmanager:
    image: flink:1.18.1-scala_2.12-java11
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: bash -c "/docker-entrypoint.sh taskmanager"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager

 
  llm_worker:
    build: ./llm_worker
    container_name: llm_worker
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      ollama:
        condition: service_started
    environment:
      - KAFKA_HOST=kafka:9092
      - OLLAMA_HOST=http://ollama:11434
    restart: unless-stopped

 
  flink_processor:
    build: ./flink_processor
    container_name: flink_processor
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      flink-jobmanager:
        condition: service_started
    environment:
      - KAFKA_HOST=kafka:9092
      - FLINK_JOBMANAGER_HOST=flink-jobmanager
    restart: on-failure:3
    
  traffic_generator:
    build: ./app
    container_name: traffic_generator
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      mysql:
        condition: service_healthy
    environment:
      - KAFKA_HOST=kafka:9092
    volumes:
      - ./preguntas:/preguntas
volumes:
  mysql_data:
  ollama_data: